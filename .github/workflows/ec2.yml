name: EC2

on:
    push:
        branches:
            - main
jobs:
    build-and-push:
        runs-on: ubuntu-latest

        steps:
        - name: Checkout code
          uses: actions/checkout@v3
     
        - name: Configure AWS credentials 
          uses: aws-actions/configure-aws-credentials@v2
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }} 
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }} 
            aws-region: ${{ secrets.AWS_REGION }}

        - name: Create security group
          id: create-sg
          run: |
            aws ec2 create-security-group --group-name "challenge2-security-group" --description "challenge-description" --vpc-id "vpc-0f0053a2d8f4a88c9"      > sg.json
            GROUP_ID=$(jq -r '.GroupId' sg.json)
            echo "Security Group ID: $GROUP_ID"
            echo "GROUP_ID=$GROUP_ID" >> $GITHUB_ENV

        - name: Show Security Group ID
          run: echo "Security Group ID is $GROUP_ID"
          env:
            GROUP_ID: ${{ env.GROUP_ID }}

        - name: Security group rules
          run: aws ec2 authorize-security-group-ingress --group-id "${{ env.GROUP_ID }}" --protocol tcp --port 22 --cidr 190.114.32.212/32

        - name: Create SSH key
          run: aws ec2 create-key-pair --key-name challenge-key --key-type rsa --key-format pem 

        - name: Setup EC2_challenge
          id: ec2-Amazon-Linux-2-AMI
          uses: truemark/aws-ec2-run-instance-action@v5
          with:
            name: "Desafio2"
            security-group-id: "${{ env.GROUP_ID }}"
            subnet-id: subnet-0f88db966ff5d3cd5
            image-id: ami-0166fe664262f664c
            instance-type: "t2.micro"
            instance-profile: "Challenge-Role"
            region: "us-east-1"
            key-name: challenge-key
            terminate-on-post: false
            
        - name: Describe instance to get ID
          id: get-instance-id
          run: |
            INSTANCE_ID=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=Desafio2" \
              --query "Reservations[*].Instances[*].InstanceId" \
              --output text)
            echo "Instance ID: $INSTANCE_ID"
            echo "INSTANCE_ID=$INSTANCE_ID" >> $GITHUB_ENV
            
        - name: Create AMI
          run: aws ec2 create-image --instance-id ${{ env.INSTANCE_ID }} --name challenge_AMI --reboot